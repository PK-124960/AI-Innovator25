import streamlit as st
import ollama

from styles.main_style import load_css
from utils.ui_helper import render_sidebar
from utils.llm_helper import init_ollama_client, draft_generation

ollama_client, OLLAMA_AVAILABLE = init_ollama_client()

# --- PAGE CONFIG & SETUP ---
st.set_page_config(
    page_title="‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£",
    page_icon="‚úçÔ∏è",
    layout="wide",
)

load_css()
render_sidebar()

with st.container(border=True):
    st.header("‚úçÔ∏è ‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£")
    st.write("‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡πâ‡∏ß AI ‡∏à‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì")
    st.markdown("---")

# --- MAIN CONTENT ---
st.markdown("---")

col1, col2 = st.columns([3, 1.5])

with col1:
    with st.container(border=True):
        st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡πÉ‡∏™‡πà‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£")
        user_prompt = st.text_area("‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", placeholder="‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏ö‡∏£‡∏°...", height=280, label_visibility="collapsed")

with col2:
    with st.container(border=True):
        st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤")
        
        doc_type = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
            ("‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡πà‡∏ß‡∏° (‡∏ó‡∏ó.)", "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"),
            key="doc_type_selector"
        )
        
        # --- ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ: ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏µ‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ---
        doc_salutation = ""
        if doc_type == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°":
            doc_salutation = st.radio(
                "‡∏Ñ‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô",
                ("‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", "‡πÄ‡∏™‡∏ô‡∏≠"),
                horizontal=True
            )
        # --- ‡∏à‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏° ---

        formality_level = st.selectbox(
            "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£", 
            ("‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£", "‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
        )


st.write("")
generate_button = st.button("‚ú® ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£", use_container_width=True, disabled=not OLLAMA_AVAILABLE)

# --- Initialize Session State for the Workflow ---
if 'editing_mode' not in st.session_state:
    st.session_state.editing_mode = False
if 'generated_content' not in st.session_state:
    st.session_state.generated_content = ""
if 'original_ai_text' not in st.session_state:
    st.session_state.original_ai_text = ""
if 'user_prompt_for_feedback' not in st.session_state:
    st.session_state.user_prompt_for_feedback = ""

# --- Logic for Generating Content ---
if generate_button and user_prompt:
    with st.spinner("üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤..."):
        generated_text = draft_generation(ollama_client, user_prompt, doc_type, formality_level, doc_salutation)
        st.session_state.generated_content = generated_text
        st.session_state.original_ai_text = generated_text # Store the pristine AI output
        st.session_state.user_prompt_for_feedback = user_prompt
        st.session_state.editing_mode = False # Always reset to read-only mode after new generation

# --- Display Results and Actions ---
if st.session_state.generated_content:
    st.write("")
    with st.container(border=True):
        st.subheader("‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å AI")

        textarea_class = "editing" if st.session_state.editing_mode else "readonly"

        st.markdown(f'<div class="stTextArea {textarea_class}">', unsafe_allow_html=True)
        edited_text = st.text_area(
            "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤:",
            value=st.session_state.generated_content,
            height=300,
            key="editable_content",
            disabled=not st.session_state.editing_mode
        )
        st.markdown('</div>', unsafe_allow_html=True)

        st.write("")

        action_col1, action_col2 = st.columns(2)

        if st.session_state.editing_mode:
            # --- Editing State UI ---
            with action_col1:
                if st.button("‚úîÔ∏è ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Feedback", use_container_width=True, type="primary"):
                    if edited_text != st.session_state.original_ai_text:
                        if save_feedback(st.session_state.original_ai_text, edited_text, st.session_state.user_prompt_for_feedback):
                            st.toast("‚úîÔ∏è ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Feedback!", icon="üéâ")
                            st.session_state.generated_content = edited_text
                        else:
                            st.toast("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Feedback", icon="üî•")
                    else:
                        st.toast("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", icon="üí°")

                    st.session_state.editing_mode = False
                    st.rerun()

            with action_col2:
                if st.button("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å", use_container_width=True):
                    st.session_state.editing_mode = False
                    # Restore the original text if user cancels
                    st.session_state.generated_content = st.session_state.original_ai_text
                    st.rerun()

        else:
            # --- Default (Read-only) State UI ---
            with action_col1:
                if st.button("‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤", use_container_width=True):
                    st.session_state.editing_mode = True
                    st.rerun()

            with action_col2:
                # Prepare the string for JavaScript, escaping necessary characters
                js_string = edited_text.replace('\\', '\\\\').replace('`', '\\`').replace('\n', '\\n')

                # Create the copy button component with corrected f-string
                st.components.v1.html(
                    f"""
                    <script>
                    function copyToClipboard() {{
                        const text = `{js_string}`;
                        navigator.clipboard.writeText(text).then(() => {{
                            window.parent.postMessage({{
                                'type': 'streamlit:toast',
                                'data': {{'message': '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', 'icon': 'üìã'}}
                            }}, '*');
                        }});
                    }}
                    </script>
                    <button onclick="copyToClipboard()" style="width: 100%; padding: 10px; border-radius: 8px; border: 1px solid #B0BEC5; background-color: #F8F9FA; color: #3D405B; font-weight: 500; cursor: pointer; transition: all 0.2s;">
                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                    </button>
                    """,
                    height=50,
                )