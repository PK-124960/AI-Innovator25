import streamlit as st
import requests
import json
import io
import time
import re
import numpy as np
import cv2
import streamlit.components.v1 as components

from pdf2image import convert_from_bytes
from PIL import Image
from styles.main_style import load_css
from utils.ui_helper import render_sidebar, reset_workflow_states
from utils.llm_helper import (
    LLM_MODEL,
    replySec234_generation,
    extract_structured_data,
    init_ollama_client,
    post_process_ocr_text,
    replySec1_generation,
    get_extraction,
    create_docx_from_text,
    log_feedback_to_csv,
    FIELDS_MEMORANDUM,
    FIELDS_JOINT_NEWS_PAPER,
    CORRECT_UNIT_ABBREVIATIONS
)

# --- PAGE CONFIG & SETUP ---
st.set_page_config(
    page_title="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    page_icon="üì¨",
    layout="wide",
)

# --- INITIALIZATION ---
ollama_client, OLLAMA_AVAILABLE = init_ollama_client()
load_css()
render_sidebar()
TYPHOON_OCR_IMAGE_ENDPOINT = "http://typhoon-ocr:8000/process"

# --- SESSION STATE INITIALIZATION ---
states_to_init = {
    'ocr_text_content': None,
    'extracted_data': None,
    'current_doc_type_for_data': None,
    'reply_content': "",
    'uploaded_file_name': None,
    'confirmed_opening_paragraph': "",
    'full_reply_draft': "",
    'is_draft_generated': False,
    'opening_options': [],
    'selected_opening': "",
    'opening_corrections_log': []
}
for key, value in states_to_init.items():
    if key not in st.session_state:
        st.session_state[key] = value

# --- HELPER FUNCTIONS ---
def preprocess_image(pil_image: Image.Image) -> Image.Image:
    try:
        open_cv_image = np.array(pil_image.convert('RGB'))
        open_cv_image = open_cv_image[:, :, ::-1].copy() # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å RGB ‡πÄ‡∏õ‡πá‡∏ô BGR

        gray_image = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)

        # --- Deskewing ---
        coords = cv2.findNonZero(cv2.bitwise_not(gray_image))
        if coords is None: # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏û‡∏Ç‡∏≤‡∏ß‡∏•‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏≥‡∏•‡πâ‡∏ß‡∏ô
            return pil_image 
        
        angle = cv2.minAreaRect(coords)[-1]
        if angle < -45:
            angle = -(90 + angle)
        else:
            angle = -angle

        (h, w) = gray_image.shape[:2]
        center = (w // 2, h // 2)
        rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
        deskewed_image = cv2.warpAffine(gray_image, rotation_matrix, (w, h),
                                       flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)
        
        # --- Denoising and Binarization ---
        denoised_image = cv2.medianBlur(deskewed_image, 3)
        binary_image = cv2.adaptiveThreshold(denoised_image, 255,
                                             cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                             cv2.THRESH_BINARY, 31, 15)

        final_pil_image = Image.fromarray(binary_image)
#         return final_pil_image

        # --- testing ---
        return pil_image 

    except Exception as e:
        st.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Image Preprocessing: {e}. ‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏û‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡πÅ‡∏ó‡∏ô")
        return pil_image

def ocr_from_images(image_bytes_list, file_name_for_log="image"):
    """Sends a list of image bytes to Typhoon-OCR and aggregates results."""
    full_text_from_all_images = []
    has_errors = False
    progress_bar = st.progress(0, text="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR...")

    for i, img_bytes in enumerate(image_bytes_list):
        files = {'file': (f'page_{i+1}.png', img_bytes, 'image/png')}
        try:
            response = requests.post(TYPHOON_OCR_IMAGE_ENDPOINT, files=files, timeout=180)
            response.raise_for_status()
            ocr_result_single_image = response.json()
            if isinstance(ocr_result_single_image, dict) and "result" in ocr_result_single_image:
                full_text_from_all_images.append(ocr_result_single_image["result"].strip())
        except Exception as e:
            st.warning(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ OCR ‡∏´‡∏ô‡πâ‡∏≤ {i+1}: {str(e)[:100]}...")
            has_errors = True
        
        # Update progress bar
        progress_bar.progress((i + 1) / len(image_bytes_list), text=f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(image_bytes_list)}")
    
    progress_bar.empty()
    separator = "\n\n--- End of Page ---\n\n"
    return separator.join(full_text_from_all_images), has_errors

def sync_opening_paragraph():
    """Syncs the radio button choice to the text area."""
    selected_option = st.session_state.get("opening_choice_radio_selector")
    if selected_option:
        st.session_state.reply_content = selected_option
        st.session_state.selected_opening = selected_option

# --- MAIN UI LAYOUT ---
with st.container(border=True):
    st.header("üì¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö', ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥ OCR, ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")

    with st.expander("‚öôÔ∏è ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Advanced Settings)"):
        use_fuzzy_matching = st.checkbox("‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏≥‡∏ú‡∏¥‡∏î‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á (Fuzzy Matching)", value=False, help="‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ä‡∏∑‡πà‡∏≠‡∏¢‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà OCR ‡∏ú‡∏¥‡∏î‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• OCR ‡∏ä‡πâ‡∏≤‡∏•‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢")
    st.markdown("---")

    st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö (PDF)")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="pdf_uploader")

    if uploaded_file is not None:
        
        is_new_file = st.session_state.uploaded_file_name != uploaded_file.name

        if is_new_file:
            reset_workflow_states()
            st.session_state.uploaded_file_name = uploaded_file.name
            st.success(f"‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: '{uploaded_file.name}'")
            st.rerun()

        # --- OCR Process ---
        if not st.session_state.ocr_text_content:
            with st.spinner(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}'..."):
                try:
                    file_bytes = uploaded_file.getvalue()
                    pil_images = convert_from_bytes(file_bytes, dpi=300, fmt='png', thread_count=4)
                    
                    image_bytes_list = []
                    for image in pil_images:
                        processed_img = preprocess_image(image)
                        img_byte_arr = io.BytesIO()
                        processed_img.save(img_byte_arr, format='PNG')
                        image_bytes_list.append(img_byte_arr.getvalue())

                    ocr_text_from_func, ocr_errors = ocr_from_images(image_bytes_list, uploaded_file.name)
                    ocr_text_processed = post_process_ocr_text(ocr_text_from_func, fuzzy_enabled=use_fuzzy_matching)
                    st.session_state.ocr_text_content = ocr_text_processed
                    st.rerun()
                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ OCR: {e}")
                    st.session_state.ocr_text_content = None # Ensure state is cleared on error

        # --- Main Workflow (executes only if OCR content exists) ---
        if st.session_state.ocr_text_content:
            with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å OCR", expanded=True):
                st.text_area("OCR Content:", st.session_state.ocr_text_content, height=200, disabled=True, label_visibility="collapsed")

            st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.1: ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö")
            doc_types = ["‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡πà‡∏ß‡∏° (‡∏ó‡∏ó.)"]
            
            # Set default index for radio button
            try:
                default_index = doc_types.index(st.session_state.current_doc_type_for_data)
            except (ValueError, TypeError):
                default_index = 0

            selected_doc_type = st.radio("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:", options=doc_types, index=default_index, horizontal=True)

            # --- Data Extraction ---
            st.markdown("---")
            st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.2: ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")

            if st.session_state.current_doc_type_for_data != selected_doc_type:
                st.session_state.extracted_data = None
                st.info(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô '{selected_doc_type}'. ‡∏´‡∏≤‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'")

            col_extract1, col_extract2 = st.columns([3, 1])
            with col_extract1:
                extract_button_label = "üîÑ ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á" if st.session_state.extracted_data else "üìä ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                extract_button = st.button(extract_button_label, use_container_width=True, disabled=not OLLAMA_AVAILABLE)
            
            with col_extract2:
                if st.session_state.extracted_data:
                    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True):
                        st.session_state.extracted_data = None
                        st.rerun()

            if extract_button:
                st.session_state.current_doc_type_for_data = selected_doc_type
                with st.spinner(f"üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{selected_doc_type}'..."):
                    try:
                        system_prompt, user_prompt_template, field_keys = get_extraction(selected_doc_type)
                        raw_extracted = extract_structured_data(ollama_client, st.session_state.ocr_text_content, selected_doc_type, system_prompt, user_prompt_template)
                        
                        if raw_extracted and isinstance(raw_extracted, dict):
                             st.session_state.extracted_data = {key: raw_extracted.get(key) for key in field_keys}
                             st.success("‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                             time.sleep(1) # Short pause to let user see the success message
                             st.rerun()
                        else:
                            st.error("AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")
                            st.session_state.extracted_data = None

                    except Exception as e:
                        st.error(f"AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")
                        st.session_state.extracted_data = None

            # --- Display and Edit Extracted Data (and subsequent steps) ---
            if st.session_state.extracted_data:
                st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ")
                current_fields_map = FIELDS_MEMORANDUM if selected_doc_type == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" else FIELDS_JOINT_NEWS_PAPER

                with st.form(key=f"edit_form_{selected_doc_type.replace(' ', '_')}"):
                    st.subheader(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {selected_doc_type}")
                    form_cols = st.columns(2)
                    col_idx = 0
                    temp_edited_data = {}

                    for field_key, field_label in current_fields_map.items():
                        current_value = st.session_state.extracted_data.get(field_key, "")
                        display_value = str(current_value) if current_value is not None else ""
                        
                        if field_key in ["body_main", "subject"]:
                             temp_edited_data[field_key] = st.text_area(f"{field_label} ({field_key}):", value=display_value, height=150)
                        else:
                            with form_cols[col_idx % 2]:
                                temp_edited_data[field_key] = st.text_input(f"{field_label} ({field_key}):", value=display_value)
                            col_idx += 1
                    
                    if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True):
                        has_changed = any(str(st.session_state.extracted_data.get(k, '')) != str(v) for k, v in temp_edited_data.items())
                        st.session_state.extracted_data.update(temp_edited_data)
                        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                        if has_changed and st.session_state.opening_options:
                            st.warning("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á '‡∏Ç‡πâ‡∏≠ ‡πë' ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
                        time.sleep(1.5)
                        st.rerun()

                # --- Step 2: Generate Reply ---
                st.markdown("---")
                st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
                st.markdown("##### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë'")
                
                if st.button("‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö", use_container_width=True):
                    with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏Ç‡πâ‡∏≠ ‡πë)..."):
                        options = replySec1_generation(ollama_client, st.session_state.extracted_data, st.session_state.ocr_text_content)
                        if options:
                            st.session_state.opening_options = options
                            st.session_state.selected_opening = options[0]
                            st.session_state.reply_content = options[0]
                            st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            st.rerun()
                        else:
                            st.error("AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ")

                if st.session_state.opening_options:
                    st.markdown("###### ‚û°Ô∏è 2.1.1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                    st.radio(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:",
                        options=st.session_state.opening_options,
                        index=st.session_state.opening_options.index(st.session_state.selected_opening) if st.session_state.selected_opening in st.session_state.opening_options else 0,
                        key="opening_choice_radio_selector",
                        on_change=sync_opening_paragraph,
                        label_visibility="collapsed"
                    )

                    st.markdown("###### ‚û°Ô∏è 2.1.2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                    with st.form(key=f"edit_opening_form_{selected_doc_type}"):
                        edited_opening = st.text_area("‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£):", value=st.session_state.reply_content, height=150, label_visibility="collapsed")
                        
                        if st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ô‡∏µ‡πâ", use_container_width=True):
                            if st.session_state.reply_content != edited_opening:
                                log_entry = {
                                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                    "original_text": st.session_state.reply_content,
                                    "edited_text": edited_opening,
                                    "document_type": selected_doc_type,
                                    "document_subject": st.session_state.extracted_data.get('subject', 'N/A')
                                }
                                log_feedback_to_csv(log_entry)
                                st.session_state.opening_corrections_log.append(log_entry)
                                st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", icon="üëç")
                            
                            st.session_state.confirmed_opening_paragraph = edited_opening
                            st.success("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()

                    if st.session_state.opening_corrections_log:
                        with st.expander("‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç '‡∏Ç‡πâ‡∏≠ ‡πë' (Feedback Log)"):
                            st.dataframe(st.session_state.opening_corrections_log)

                if st.session_state.confirmed_opening_paragraph:
                    st.markdown("---")
                    st.markdown("##### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.2: ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                    with st.container(border=True):
                        st.markdown("###### ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:")
                        department_options = CORRECT_UNIT_ABBREVIATIONS
                        reply_intent_options = {
                            "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ / ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö",
                            "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò / ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ": "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò/‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö",
                            "‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö (‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠)": "‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
                            "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á / ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô": "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô"
                        }

                        col1, col2 = st.columns(2)
                        with col1:
                            selected_department = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö:", options=department_options)
                        with col2:
                            selected_intent_display = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏´‡∏•‡∏±‡∏Å:", options=list(reply_intent_options.keys()))
                            selected_intent_for_llm = reply_intent_options[selected_intent_display]
                    
                    if st.button("ü§ñ ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠ (‡∏Ç‡πâ‡∏≠ ‡πí, ‡πì, ...)", use_container_width=True):
                        with st.spinner(f"AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Ñ‡∏∑‡∏≠ '{selected_intent_display}'..."):
                            try:
                                info_for_analysis = st.session_state.extracted_data.copy()
                                info_for_analysis["user_provided_opening_paragraph"] = st.session_state.confirmed_opening_paragraph
                                
                                generated_body = replySec234_generation(
                                    client=ollama_client,
                                    extracted_info=info_for_analysis,
                                    original_doc_type=selected_doc_type,
                                    reply_intent=selected_intent_for_llm,
                                    relevant_internal_data={"our_department_name": selected_department}
                                )
                                st.session_state.full_reply_draft = st.session_state.confirmed_opening_paragraph + "\n" + generated_body
                                st.session_state.is_draft_generated = True
                                st.success("AI ‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
                                st.rerun()
                            except Exception as e:
                                st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {e}")

                if st.session_state.is_draft_generated:
                    st.markdown("---")
                    st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                    st.text_area("üìù ‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå:", value=st.session_state.full_reply_draft, height=400, key="full_draft_textarea")
                    
                    export_col1, export_col2 = st.columns(2)
                    with export_col1:
                            try:
                                subject = st.session_state.extracted_data.get('subject', '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ').replace("/", "_")
                                file_name_suggestion = f"‡∏£‡πà‡∏≤‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö_{subject[:25]}.docx"

                                docx_bytes = create_docx_from_text(st.session_state.full_reply_draft)
                                st.download_button(
                                    label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô .docx",
                                    data=docx_bytes,
                                    file_name=file_name_suggestion,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    use_container_width=True,
                                    disabled=not st.session_state.full_reply_draft.strip()
                                )
                            except Exception as e:
                                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .docx ‡πÑ‡∏î‡πâ: {e}")

                    with export_col2:

                        text_to_copy = st.session_state.full_reply_draft

                        if text_to_copy and text_to_copy.strip():

                            js_string = text_to_copy.replace('\\', '\\\\').replace('`', '\\`').replace('\n', '\\n').replace('"', '\\"')

                            import streamlit.components.v1 as components
                            components.html(
                                f"""
                                <script>
                                // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° HTML
                                function copyToClipboard() {{
                                    const text = `{js_string}`;
                                    // ‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á Clipboard
                                    navigator.clipboard.writeText(text).then(() => {{
                                        // ‡∏™‡πà‡∏á custom event ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Streamlit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Toast
                                        window.parent.parent.postMessage({{
                                            'type': 'streamlit:setFrameHeight',
                                            'data': {{'message': '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', 'icon': 'üìã', 'type': 'toast'}}
                                        }}, '*');
                                    }}, (err) => {{
                                        alert("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " + err);
                                    }});
                                }}
                                </script>

                                <!-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° HTML ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô JS ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô -->
                                <button onclick="copyToClipboard()" 
                                        style="
                                            width: 100%; 
                                            padding: 0.60rem 0.75rem; /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Streamlit */
                                            border-radius: 0.5rem; 
                                            border: 1px solid rgba(49, 51, 63, 0.2);
                                            background-color: #FFFFFF; 
                                            color: #31333F; 
                                            font-weight: 400; 
                                            cursor: pointer; 
                                            transition: all 0.2s;
                                            font-family: 'Source Sans Pro', sans-serif; /* ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Streamlit */
                                            font-size: 1rem;
                                            text-align: center;
                                            line-height: 1.6;
                                        ">
                                    üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                </button>
                                <style>
                                    /* ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effect ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° */
                                    button:hover {{
                                        border-color: #FF4B4B;
                                        color: #FF4B4B;
                                    }}
                                    button:active {{
                                        background-color: #F0F2F6;
                                    }}
                                </style>
                                """,
                                height=55
                            )
                        else:
                            st.button("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True, disabled=True)

    else:
        # This block runs when no file is uploaded.
        if st.session_state.uploaded_file_name:
            reset_workflow_states() # Clear state if file is removed
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")