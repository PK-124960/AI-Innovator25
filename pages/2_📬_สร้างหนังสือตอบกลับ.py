import streamlit as st
import ollama
import requests
import json
import io
import re
import numpy as np
import cv2
import streamlit.components.v1 as components

from skimage.filters import threshold_local
from pdf2image import convert_from_bytes, pdfinfo_from_bytes
from PIL import Image
from styles.main_style import load_css
from utils.ui_helper import render_sidebar 
from utils.llm_helper import (
    LLM_MODEL,
    replySec234_generation,
    extract_structured_data,
    init_ollama_client,
    post_process_ocr_text,
    replySec1_generation,
    get_extraction,
    create_docx_from_text,
    log_feedback_to_csv
)

# --- PAGE CONFIG & SETUP ---
st.set_page_config(
    page_title="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£",
    page_icon="üì¨",
    layout="wide",
)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á client ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
ollama_client, OLLAMA_AVAILABLE = init_ollama_client()

load_css()
render_sidebar()

# --- CONFIGURATIONS ---
TYPHOON_OCR_IMAGE_ENDPOINT = "http://typhoon-ocr:8000/process"

# --- GLOBAL VARIABLES & SESSION STATE INITIALIZATION ---
if 'ocr_text_content' not in st.session_state:
    st.session_state.ocr_text_content = None
if 'extracted_data' not in st.session_state:
    st.session_state.extracted_data = None
if 'current_doc_type_for_data' not in st.session_state:
    st.session_state.current_doc_type_for_data = None
if 'reply_content' not in st.session_state:
    st.session_state.reply_content = ""
if 'uploaded_file_name' not in st.session_state:
    st.session_state.uploaded_file_name = None
if 'confirmed_opening_paragraph' not in st.session_state:
    st.session_state.confirmed_opening_paragraph = ""
if 'full_reply_draft' not in st.session_state:
    st.session_state.full_reply_draft = ""
if 'is_draft_generated' not in st.session_state:
    st.session_state.is_draft_generated = False
if 'opening_options' not in st.session_state:
    st.session_state.opening_options = []
if 'opening_corrections_log' not in st.session_state:
    st.session_state.opening_corrections_log = []

FIELDS_MEMORANDUM = {
    "department": "‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏ä‡∏Å‡∏≤‡∏£",
    "document_number": "‡∏ó‡∏µ‡πà (‡πÄ‡∏•‡∏Ç‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠)",
    "date": "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà",
    "subject": "‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á",
    "recipient": "‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡πÄ‡∏™‡∏ô‡∏≠",
    "reference": "‡∏≠‡πâ‡∏≤‡∏á‡∏ñ‡∏∂‡∏á",
    "attachments": "‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢",
    "body_main": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å",
    "proposer_rank_name": "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠",
    "proposer_position": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠",
    "approver_rank_name": "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥",
    "approver_position": "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥"
}

FIELDS_JOINT_NEWS_PAPER = {
    "urgency": "‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô",
    "confidentiality": "‡∏ä‡∏±‡πâ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö",
    "datetime_group": "‡∏´‡∏°‡∏π‡πà-‡∏ß‡∏±‡∏ô-‡πÄ‡∏ß‡∏•‡∏≤",
    "page_info": "‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà",
    "originator_ref": "‡∏ó‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ‡∏Ç‡πà‡∏≤‡∏ß",
    "from_department": "‡∏à‡∏≤‡∏Å (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á)",
    "to_recipient": "‡∏ñ‡∏∂‡∏á (‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥)",
    "info_recipient": "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
    "body_main": "‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß",
    "qr_email": "QR Code/Email",
    "responsible_unit": "‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö)",
    "phone": "‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå",
    # "reporter_signature": "‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πà‡∏≤‡∏ß", # ‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏Å
    "reporter_rank_name_position": "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πà‡∏≤‡∏ß",
    # "approver_signature": "‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ô‡∏≤‡∏¢‡∏ó‡∏´‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡πà‡∏≤‡∏ß", # ‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏≠‡∏≤‡∏à‡∏¢‡∏≤‡∏Å
    "approver_rank_name_position": "‡∏¢‡∏® ‡∏ä‡∏∑‡πà‡∏≠ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏≤‡∏¢‡∏ó‡∏´‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏Ç‡πà‡∏≤‡∏ß"
}

UNIT_ABBREVIATIONS = [
    "‡∏Å‡∏ò‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏ß‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏á‡∏õ.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏Å‡∏á.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ô‡∏ï‡∏™.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ô‡∏ò‡∏ô.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏Å‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£","‡∏Å‡∏Ç‡∏ã.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£","‡∏Å‡∏¢‡∏Å.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", 
    "‡∏Å‡∏ï‡∏ã.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏õ‡∏Å.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏Å.‡πë ‡∏™‡∏õ‡∏Å.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏Å.‡πí ‡∏™‡∏õ‡∏Å.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏Å.‡πì ‡∏™‡∏õ‡∏Å.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏Å‡∏ß‡∏Å.‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏£‡∏£.‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£ ‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏®‡∏©.‡∏£‡∏£.‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£ ‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏ô.‡∏ö‡∏Å.‡∏ö‡∏Å.‡∏ó‡∏ó.", "‡∏™‡∏•‡∏Å.‡∏ö‡∏Å.‡∏ó‡∏ó.", "‡∏™‡∏à‡∏£.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏ï‡∏ô.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏™‡∏Å.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏™‡∏™‡∏Å.‡∏ö‡∏Å.‡∏ó‡∏ó.", "‡∏™‡∏¢‡∏¢.‡∏ó‡∏´‡∏≤‡∏£", "‡∏•‡∏ä‡∏ó.‡∏£‡∏≠‡∏á", "‡∏®‡∏õ‡∏£.", "‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏ò‡∏ô.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Ç‡∏ß.‡∏ó‡∏´‡∏≤‡∏£", "‡∏¢‡∏Å.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏£.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏ô.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏ó.‡∏®‡∏ó‡∏™.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏Å‡∏ó‡∏Ñ.‡∏®‡∏ó‡∏ó.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏û‡∏±‡∏ô.‡∏õ‡∏™‡∏≠.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏£‡πâ‡∏≠‡∏¢.‡∏ö‡∏Å.‡∏û‡∏±‡∏ô.‡∏™.‡∏ö‡∏Å.‡∏ó‡∏ó.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏£‡πâ‡∏≠‡∏¢.‡∏ö‡∏Å.‡∏û‡∏±‡∏ô.‡∏™.", "‡∏™‡∏õ‡∏ä.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ô‡∏ó‡∏û.", "‡∏®‡∏£‡∏†.", "‡∏®‡∏ï‡∏Å.", "‡∏™‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏á.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏ó.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏ô‡∏û.‡∏¢‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ä‡∏î.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ö‡∏Å.‡∏™‡∏õ‡∏ó.", "‡∏ß‡∏õ‡∏≠.‡∏™‡∏õ‡∏ó.", "‡∏ß‡∏™‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏à‡∏ß.‡∏™‡∏õ‡∏ó.", "‡∏®‡∏®‡∏¢.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏®‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏£‡∏£.‡∏ï‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏£‡∏£.‡∏ä‡∏ó.‡∏™‡∏õ‡∏ó.",
    "‡∏£‡∏≠‡∏á ‡∏ú‡∏≠.‡∏Å‡∏†‡∏®.‡∏®‡∏®‡∏¢.‡∏™‡∏õ‡∏ó.", "‡∏£‡∏≠‡∏á ‡∏ú‡∏≠.‡∏Å‡∏Å‡∏ß.‡∏ß‡∏™‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏ô.‡∏û‡∏ô.‡∏ß‡∏™‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏ô.‡∏û‡∏ô.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏ô.‡∏£‡∏≠‡∏á ‡∏ú‡∏ö.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏ô.‡πÄ‡∏™‡∏ò.‡∏™‡∏õ‡∏ó.", "‡∏Å‡∏û.‡∏ó‡∏´‡∏≤‡∏£", "‡∏£‡∏≠‡∏á ‡∏à‡∏Å.‡∏Å‡∏û.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏à‡∏Å.‡∏Å‡∏û.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ö‡∏Å.‡∏ó‡∏ó.", "‡∏ú‡∏ä.‡∏ú‡∏≠.‡∏Å‡∏£‡∏†.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏´‡∏Å.‡∏Å‡∏ò‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏£‡∏†.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏õ‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏Å‡∏ß‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ô‡∏Ç‡∏ï.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏Å‡∏¢‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏ö.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏Å‡∏£‡∏†.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏Å‡∏ß‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏®‡∏ä‡∏õ.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏Å‡∏ß‡∏Å.‡∏®‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏™‡∏à.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏™‡∏ô‡∏¢.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ß‡∏™‡∏™.‡∏™‡∏õ‡∏ó.", "‡∏™‡∏Ñ‡∏ó.‡∏™‡∏õ‡∏ó.", "‡∏Å‡∏°‡∏®.‡∏ö‡∏Å.‡∏™‡∏õ‡∏ó.", "‡∏£‡∏≠‡∏á ‡πÄ‡∏™‡∏ò.‡∏™‡∏õ‡∏ó.", "‡∏ú‡∏ö.‡∏™‡∏õ‡∏ó.", "‡∏Ñ‡∏ó‡∏™.‡∏ö‡∏Å.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏Å‡∏ô‡∏ú.‡∏™‡∏ú‡∏≠.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏ú‡∏≠.‡∏™‡∏ú‡∏≠.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£", "‡∏à‡∏Å.‡∏™‡∏™.‡∏ó‡∏´‡∏≤‡∏£",
    "‡∏ú‡∏≠.‡∏Å‡∏®‡∏ä.‡∏™‡∏®‡∏ó.‡∏™‡∏õ‡∏ó.", "‡πÄ‡∏™‡∏ò.‡∏™‡∏õ‡∏ó.", "‡∏Å‡∏ß‡∏Å.‡∏®‡∏ä‡∏•.‡∏ô‡∏ä‡∏ö.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏™‡∏ó.‡∏ó‡∏£.", "‡∏®‡∏ä‡∏ö.‡∏™‡∏™‡∏ó.‡∏ó‡∏£.", "‡∏à‡∏Å.‡∏™‡∏™‡∏ó.‡∏ó‡∏£.", "‡∏à‡∏Å.‡∏™‡∏ô.‡∏ó‡∏´‡∏≤‡∏£", "‡∏™‡∏ô‡∏û.‡∏Å‡∏û.‡∏ó‡∏´‡∏≤‡∏£","‡∏®‡∏ã‡∏•.‡∏ô‡∏ã‡∏ö.‡∏ó‡∏´‡∏≤‡∏£"
]


# --- HELPER FUNCTIONS ---
def preprocess_image(pil_image: Image.Image) -> Image.Image:
    try:
#         open_cv_image = np.array(pil_image.convert('RGB'))
#         open_cv_image = open_cv_image[:, :, ::-1].copy() # ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å RGB ‡πÄ‡∏õ‡πá‡∏ô BGR

#         gray_image = cv2.cvtColor(open_cv_image, cv2.COLOR_BGR2GRAY)

#         coords = cv2.findNonZero(cv2.bitwise_not(gray_image))
#         angle = cv2.minAreaRect(coords)[-1]

#         if angle < -45:
#             angle = -(90 + angle)
#         else:
#             angle = -angle

#         # ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏≠‡∏µ‡∏¢‡∏á
#         (h, w) = gray_image.shape[:2]
#         center = (w // 2, h // 2)
#         rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)
#         deskewed_image = cv2.warpAffine(gray_image, rotation_matrix, (w, h),
#                                        flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)

#         denoised_image = cv2.medianBlur(deskewed_image, 3)
#         binary_image = cv2.adaptiveThreshold(denoised_image, 255,
#                                              cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
#                                              cv2.THRESH_BINARY, 31, 15)


#         final_pil_image = Image.fromarray(binary_image)
#         return final_pil_image
        return pil_image

    except Exception as e:
        print(f"Error during image preprocessing: {e}")
        return pil_image

def ocr_from_images(image_bytes_list, file_name_for_log="image"):
    """Sends a list of image bytes to Typhoon-OCR and aggregates results."""
    full_text_from_all_images = [] 
    has_errors = False

    for i, img_bytes in enumerate(image_bytes_list):
        # st.info(f"OCR ‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏µ‡πà {i+1}/{len(image_bytes_list)} ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå '{file_name_for_log}'...")
        files = {'file': (f'page_{i+1}.png', img_bytes, 'image/png')}
        try:
            response = requests.post(TYPHOON_OCR_IMAGE_ENDPOINT, files=files, timeout=180) # Increased timeout
            response.raise_for_status()
            ocr_result_single_image = response.json()
            
            st.json(ocr_result_single_image) 

            current_image_text = ""
            if isinstance(ocr_result_single_image, dict) and "result" in ocr_result_single_image:
                current_image_text = ocr_result_single_image["result"]
                full_text_from_all_images.append(current_image_text.strip())
            else:
                st.warning(f"‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á OCR output ‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤ {i+1} ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ key 'result': {str(ocr_result_single_image)[:200]}...")
                pass


        except requests.exceptions.Timeout:
            st.error(f"‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Typhoon-OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤ {i+1}.")
            full_text_from_all_images.append(f"[OCR Timeout Page {i+1}]")
            has_errors = True
        except requests.exceptions.RequestException as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Typhoon-OCR ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤ {i+1}: {e}")
            full_text_from_all_images.append(f"[OCR Request Error Page {i+1}]")
            has_errors = True
        except json.JSONDecodeError:
            st.error(f"Typhoon-OCR ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏ô‡πâ‡∏≤ {i+1}. Response: {response.text[:200]}...")
            full_text_from_all_images.append(f"[OCR JSON Error Page {i+1}]")
            has_errors = True

    # ‡∏£‡∏ß‡∏° text ‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    separator_template = "\n\n--- End of Page {page_num} / Total Pages {total_pages} ---\n\n"
    combined_text = ""
    total_pages_ocr = len(full_text_from_all_images)
    for i, page_text in enumerate(full_text_from_all_images):
        combined_text += page_text
        if i < total_pages_ocr - 1: # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏° separator ‡∏´‡∏•‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
             combined_text += separator_template.format(page_num=i+1, total_pages=total_pages_ocr)

    return combined_text.strip(), has_errors

def on_radio_change():
    
    if 'opening_choice_radio' in st.session_state:
        st.session_state.selected_opening = st.session_state.opening_choice_radio
        st.session_state.reply_content = st.session_state.opening_choice_radio

def sync_opening_paragraph():
    
    selected_option = st.session_state.opening_choice_radio_selector
    st.session_state.reply_content = selected_option
    st.session_state.selected_opening = selected_option

    
    
    
# --- MAIN UI LAYOUT ---
with st.container(border=True):
    st.header("üì¨ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")
    st.write("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Ç‡∏≠‡∏á '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö', ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥ OCR, ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•, ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")
    st.markdown("---")

    # --- Step 1: File Upload ---
    st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö (PDF)")
    uploaded_file = st.file_uploader("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF", type="pdf", key="pdf_uploader")

    if uploaded_file is not None:
        # Check if it's a new file or the same one
        if st.session_state.uploaded_file_name != uploaded_file.name:
            st.session_state.ocr_text_content = None
            st.session_state.extracted_data = None
            st.session_state.reply_content = ""
            st.session_state.current_doc_type_for_data = None
            st.session_state.uploaded_file_name = uploaded_file.name
            st.success(f"‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà: '{uploaded_file.name}'")


        # --- OCR Process ---
        if st.session_state.ocr_text_content is None:
            file_bytes = uploaded_file.getvalue()
            with st.status(f"‚öôÔ∏è ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• '{uploaded_file.name}'...", expanded=True) as status_ocr:
                try:
                    status_ocr.write("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
                    pil_images = convert_from_bytes(file_bytes, dpi=300, fmt='png', thread_count=4)
                    image_bytes_list = []
                    for i, image in enumerate(pil_images):
                        image = preprocess_image(image)
                        img_byte_arr = io.BytesIO()
                        image.save(img_byte_arr, format='PNG')
                        image_bytes_list.append(img_byte_arr.getvalue())
                    status_ocr.update(label=f"‚úÖ ‡πÅ‡∏õ‡∏•‡∏á PDF ‡πÄ‡∏õ‡πá‡∏ô {len(image_bytes_list)} ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", state="running")

                    status_ocr.write("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥ OCR ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
                    ocr_text_from_func, ocr_errors = ocr_from_images(image_bytes_list, uploaded_file.name)

                    # --- ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Post-processing ---
                    if ocr_text_from_func: # ‡πÉ‡∏ä‡πâ ocr_text_from_func ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ocr_from_images
                        status_ocr.write("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå OCR...")
                        ocr_text_processed = post_process_ocr_text(ocr_text_from_func) 
                        st.session_state.ocr_text_content = ocr_text_processed 

                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£ process ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
                        # with st.expander("‡πÅ‡∏™‡∏î‡∏á OCR text ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏±‡∏á process (Debug)"):
                        #     st.text_area("OCR Raw:", ocr_text_from_func, height=150)
                        #     st.text_area("OCR Processed:", ocr_text_processed, height=150)
                    else:
                        # ‡∏ñ‡πâ‡∏≤ ocr_text_from_func ‡πÄ‡∏õ‡πá‡∏ô None ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡πá‡πÉ‡∏´‡πâ ocr_text_content ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
                        st.session_state.ocr_text_content = ocr_text_from_func

                    if ocr_errors:
                         status_ocr.update(label=f"‚ö†Ô∏è OCR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{uploaded_file.name}' (‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤)", state="complete", expanded=False)
                    else:
                        status_ocr.update(label=f"‚úÖ OCR ‡πÑ‡∏ü‡∏•‡πå '{uploaded_file.name}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", state="complete", expanded=False)

                except Exception as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ OCR: {e}")
                    status_ocr.update(label=f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ OCR: {e}", state="error")
                    st.session_state.ocr_text_content = None
                    st.stop()

        # --- Display OCR Text and Select Document Type ---
        if st.session_state.ocr_text_content:
            with st.expander("‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏à‡∏≤‡∏Å OCR (1000 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÅ‡∏£‡∏Å)"):
                st.text(st.session_state.ocr_text_content[:1000] + "..." if st.session_state.ocr_text_content and len(st.session_state.ocr_text_content) > 100 else st.session_state.ocr_text_content)

            st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.1: ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏£‡∏±‡∏ö")
            doc_types = ["‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡πà‡∏ß‡∏° (‡∏ó‡∏ó.)"]
            if st.session_state.current_doc_type_for_data and st.session_state.current_doc_type_for_data in doc_types:
                default_index_doc_type = doc_types.index(st.session_state.current_doc_type_for_data)
            else:
                default_index_doc_type = 0

            selected_doc_type = st.radio(
                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î:",
                options=doc_types,
                index=default_index_doc_type,
                key="doc_type_selection_radio", # Unique key
                horizontal=True
            )

            # --- Data Extraction ---
            st.markdown("---")
            st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.2: ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£")

            # If document type changes, clear old extracted data
            if st.session_state.current_doc_type_for_data != selected_doc_type:
                st.session_state.extracted_data = None # Clear data if type changed
                st.info(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô '{selected_doc_type}' ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•' ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")


            col_extract1, col_extract2 = st.columns([3,1])
            with col_extract1:
                extract_button_label = "üìä ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                if st.session_state.extracted_data and st.session_state.current_doc_type_for_data == selected_doc_type:
                    extract_button_label = "üîÑ ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
                extract_button = st.button(extract_button_label, 
                                           use_container_width=True,
                                           disabled=not OLLAMA_AVAILABLE or not selected_doc_type or not st.session_state.ocr_text_content)
            with col_extract2:
                if st.session_state.extracted_data:
                    if st.button("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î", use_container_width=True):
                        st.session_state.extracted_data = None
                        st.session_state.reply_content = ""


            if extract_button:
                st.session_state.current_doc_type_for_data = selected_doc_type
                st.session_state.extracted_data = None 
                st.session_state.reply_content = ""
                st.session_state.opening_options = [] 
                st.session_state.selected_opening = ""

                try:
                    with st.spinner(f"üß† AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{selected_doc_type}'..."):

                        system_prompt, user_prompt_template, field_keys = get_extraction(selected_doc_type)

                        raw_extracted = extract_structured_data(
                            client=ollama_client,
                            ocr_text_content=st.session_state.ocr_text_content,
                            document_type=selected_doc_type,
                            system_prompt=system_prompt,
                            user_prompt_template=user_prompt_template
                        )

                        if raw_extracted and isinstance(raw_extracted, dict):
                            st.session_state.extracted_data = {
                                key: raw_extracted.get(key) for key in field_keys
                            }
                            st.success(f"‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö '{selected_doc_type}' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                        else:
                            st.session_state.extracted_data = None 
                            st.error("‡∏Å‡∏≤‡∏£‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Dictionary)")

                except Exception as e:
                    st.session_state.extracted_data = None 
                    st.error(f"AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ: {e}")

                if not st.session_state.extracted_data and extract_button: 
                    st.warning("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏Å‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Log ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")


            # --- Display and Edit Extracted Data ---
            if st.session_state.extracted_data and st.session_state.current_doc_type_for_data == selected_doc_type:
                st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1.3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ")

                if selected_doc_type == "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°":
                    current_fields_map = FIELDS_MEMORANDUM
                elif selected_doc_type == "‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ç‡πà‡∏≤‡∏ß‡∏£‡πà‡∏ß‡∏° (‡∏ó‡∏ó.)":
                    current_fields_map = FIELDS_JOINT_NEWS_PAPER
                else:
                    current_fields_map = {}

                with st.form(key=f"edit_form_{selected_doc_type.replace(' ', '_').lower()}"):
                    st.subheader(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {selected_doc_type}")
                    form_cols = st.columns(2)
                    col_idx = 0
                    temp_edited_data = {}

                    for field_key, field_label in current_fields_map.items():
                        current_value = st.session_state.extracted_data.get(field_key)
                        display_value = str(current_value) if current_value is not None else ""

                        if field_key in ["body_main", "subject"]:
                            temp_edited_data[field_key] = st.text_area(
                                f"{field_label} ({field_key}):", value=display_value,
                                height=150 if field_key == "body_main" else 75,
                                key=f"edit_{selected_doc_type}_{field_key}"
                            )
                        else:
                            with form_cols[col_idx % 2]:
                                temp_edited_data[field_key] = st.text_input(
                                    f"{field_label} ({field_key}):", value=display_value,
                                    key=f"edit_{selected_doc_type}_{field_key}"
                                )
                            col_idx += 1

                    save_edits_button = st.form_submit_button("üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", use_container_width=True) #here
#                     if save_edits_button:
#                         st.session_state.extracted_data.update(temp_edited_data)
#                         st.session_state.opening_options = []
# #                         st.session_state.reply_content = ""
#                         st.session_state.full_reply_draft = ""
#                         st.session_state.is_draft_generated = False
#                         st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
#                         st.rerun() 
                    if save_edits_button:
                        # 1. ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                        has_changed = any(str(st.session_state.extracted_data.get(k, '')) != str(v) for k, v in temp_edited_data.items())

                        # 2. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ
                        st.session_state.extracted_data.update(temp_edited_data)
                        st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

                        # 3. ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡∏°‡∏µ "‡∏Ç‡πâ‡∏≠ ‡πë" ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        if has_changed and st.session_state.opening_options:
                            st.warning("‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß! ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Ñ‡∏ß‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á '‡∏Ç‡πâ‡∏≠ ‡πë' ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")


                # --- ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ---
                st.markdown("---")
                st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö")

                # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2.1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë'
                st.markdown("##### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.1: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë'")

                generate_options_button = st.button(
                    "‚ú® ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö",
                    use_container_width=True,
                    disabled=not OLLAMA_AVAILABLE or not st.session_state.extracted_data,
                    key=f"gen_opening_options_btn_{selected_doc_type}"
                )

                if generate_options_button:
                    st.session_state.reply_content = ""
                    st.session_state.opening_options = []
                    st.session_state.selected_opening = ""
                    st.session_state.full_reply_draft = ""
                    st.session_state.is_draft_generated = False

                    if st.session_state.extracted_data:
                        with st.spinner("AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏Ç‡πâ‡∏≠ ‡πë)..."):
                            st.session_state.opening_options = replySec1_generation(
                                                                    client=ollama_client,
                                                                    extracted_info=st.session_state.extracted_data, # ‡∏¢‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                                                                    ocr_text_content=st.session_state.ocr_text_content, # ‡∏™‡πà‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ OCR ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
                                                                    num_options=3
                                                                )
                            st.session_state.last_extracted_for_opening = st.session_state.extracted_data.get('document_number')

                            if st.session_state.opening_options and all(isinstance(opt, str) for opt in st.session_state.opening_options):
                                st.session_state.selected_opening = st.session_state.opening_options[0]
                                st.session_state.reply_content = st.session_state.selected_opening
                                st.success("‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
                            else:
                                st.error("AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)")
                                st.session_state.opening_options = []
                    else:
                        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏Å‡∏±‡∏î‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å '‡∏Ç‡πâ‡∏≠ ‡πë'")


                # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2.2 ‡πÅ‡∏•‡∏∞ 3 ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡πá‡∏ï‡πà‡∏≠‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å "‡∏Ç‡πâ‡∏≠ ‡πë" ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
                if st.session_state.get('opening_options'):
                    st.markdown("###### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.1.1: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà AI ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥")
                    st.radio(
                        "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:",
                        options=st.session_state.opening_options,
                        index=st.session_state.opening_options.index(st.session_state.selected_opening) if st.session_state.selected_opening in st.session_state.opening_options else 0,
                        key="opening_choice_radio_selector", # <--- Key ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö widget ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
                        on_change=sync_opening_paragraph,
                        label_visibility="collapsed" # ‡∏ã‡πà‡∏≠‡∏ô Label "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö:" ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
                    )

                    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2.1.2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô "‡∏Ç‡πâ‡∏≠ ‡πë" (‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°)
                    st.markdown("###### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.1.2: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                    with st.form(key=f"edit_opening_form_{selected_doc_type}"):
                        
                        edited_opening_in_form = st.text_area(
                            "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£):",
                            value=st.session_state.reply_content, # ‡∏Ñ‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÇ‡∏î‡∏¢ on_change ‡∏Ç‡∏≠‡∏á radio
                            height=150,
                            key="opening_text_area_in_form",
                            label_visibility="collapsed"
                        )

                        save_edit_button = st.form_submit_button(
                            "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏ô‡∏µ‡πâ",
                            use_container_width=True
                        )

                        if save_edit_button:
                            confirmed_text = edited_opening_in_form
                            
                            if st.session_state.reply_content != confirmed_text:
                                from datetime import datetime
                                correction_log_entry = {
                                    "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                                    "original_text": st.session_state.reply_content,
                                    "edited_text": confirmed_text,
                                    "document_type": selected_doc_type,
                                    "document_subject": st.session_state.extracted_data.get('subject', 'N/A')
                                }
                                log_feedback_to_csv(correction_log_entry)
                                st.session_state.opening_corrections_log.append(correction_log_entry)
                                st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", icon="üëç")
                            else:
                                st.toast("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á)", icon="‚úîÔ∏è")

                            st.session_state.reply_content = confirmed_text
                            if confirmed_text in st.session_state.opening_options:
                                st.session_state.selected_opening = confirmed_text

                            st.success("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô '‡∏Ç‡πâ‡∏≠ ‡πë' ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
                            st.rerun()

                    # --- ‡πÅ‡∏™‡∏î‡∏á Log ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ---
                    if st.session_state.opening_corrections_log:
                        with st.expander("‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç '‡∏Ç‡πâ‡∏≠ ‡πë' (Feedback Log)"):
                            st.dataframe(st.session_state.opening_corrections_log)

                    st.markdown("---")

                    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 2.3: ‡πÉ‡∏´‡πâ AI ‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
                    st.markdown("##### ‚û°Ô∏è ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2.2: ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠")
                    with st.container(border=True):
                        st.markdown("###### ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:")

                        # List ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô
                        department_options = UNIT_ABBREVIATIONS

                        # List ‡∏Ç‡∏≠‡∏á‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
                        reply_intent_options = {
                            "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ / ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏ô‡∏≠": "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö",
                            "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò / ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ": "‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò/‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö",
                            "‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö (‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠)": "‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö‡∏ó‡∏£‡∏≤‡∏ö",
                            "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á / ‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏∑‡πà‡∏ô": "‡∏™‡πà‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á/‡∏õ‡∏£‡∏∞‡∏™‡∏≤‡∏ô‡∏á‡∏≤‡∏ô"
#                             "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°": "‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°",
#                             "‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£": "‡πÅ‡∏à‡πâ‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)"
                        }

                        col1, col2 = st.columns(2)
                        with col1:
                            selected_department = st.selectbox(
                                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏π‡πâ‡∏ï‡∏≠‡∏ö (‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤):",
                                options=department_options,
                                key="department_selector"
                            )

                        with col2:
                            selected_intent_display = st.selectbox(
                                "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö:",
                                options=list(reply_intent_options.keys()), 
                                key="intent_selector"
                            )
                            selected_intent_for_llm = reply_intent_options[selected_intent_display]

                    # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤
                    generate_full_draft_button = st.button(
                        "ü§ñ ‡πÉ‡∏´‡πâ AI ‡∏ä‡πà‡∏ß‡∏¢‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠ (‡∏Ç‡πâ‡∏≠ ‡πí, ‡πì, ...)",
                        key=f"generate_full_draft_btn_{selected_doc_type}",
                        use_container_width=True,
                        disabled=not st.session_state.reply_content.strip() # ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ñ‡πâ‡∏≤ "‡∏Ç‡πâ‡∏≠ ‡πë" ‡∏ß‡πà‡∏≤‡∏á
                    )

                    if generate_full_draft_button:

                        confirmed_text = st.session_state.get('reply_content', '')

                        st.session_state.confirmed_opening_paragraph = confirmed_text
                        st.session_state.is_draft_generated = False 

                        if not st.session_state.confirmed_opening_paragraph.strip():
                            st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ '‡∏Ç‡πâ‡∏≠ ‡πë' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏î '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç' ‡∏Å‡πà‡∏≠‡∏ô")
                        else:
                            with st.spinner(f"AI ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡πÄ‡∏à‡∏ï‡∏ô‡∏≤‡∏Ñ‡∏∑‡∏≠ '{selected_intent_display}'..."):
                                try:
                                    # 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
                                    info_for_analysis = st.session_state.extracted_data.copy()
                                    info_for_analysis["user_provided_opening_paragraph"] = st.session_state.confirmed_opening_paragraph

                                    our_department_name = selected_department
                                    reply_intent = selected_intent_for_llm

                                    generated_body = replySec234_generation(
                                        client=ollama_client,
                                        extracted_info=info_for_analysis,
                                        original_doc_type=selected_doc_type,
                                        reply_intent=reply_intent,
                                        relevant_internal_data={"our_department_name": our_department_name}
                                    )

                                    if generated_body and "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î" not in generated_body:
                                        st.session_state.full_reply_draft = generated_body
                                        st.session_state.is_draft_generated = True
                                        st.success("AI ‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á")
                                    else:
                                        st.error(f"AI ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ: {generated_body}")
                                except Exception as e:
                                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏£‡πà‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤: {e}")

                    # ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà 3: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå, ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç, ‡πÅ‡∏•‡∏∞ Export
                    if st.session_state.reply_content.strip() and st.session_state.get('is_draft_generated', False):
                        st.markdown("---")
                        st.markdown("#### ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
                        st.subheader("üìù ‡∏£‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏â‡∏ö‡∏±‡∏ö‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå")

                        edited_full_draft = st.text_area(
                            "‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏â‡∏ö‡∏±‡∏ö‡∏£‡πà‡∏≤‡∏á:",
                            value=st.session_state.full_reply_draft,
                            height=400,
                            key=f"full_draft_textarea_{selected_doc_type}",
                            help="‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Export"
                        )
                        if edited_full_draft != st.session_state.full_reply_draft:
                            st.session_state.full_reply_draft = edited_full_draft

                        st.markdown("---")
                        export_col1, export_col2 = st.columns(2)

                        with export_col1:
                            try:
                                subject = st.session_state.extracted_data.get('subject', '‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ').replace("/", "_")
                                file_name_suggestion = f"‡∏£‡πà‡∏≤‡∏á‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö_{subject[:25]}.docx"

                                docx_bytes = create_docx_from_text(st.session_state.full_reply_draft)
                                st.download_button(
                                    label="üìÑ ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏õ‡πá‡∏ô .docx",
                                    data=docx_bytes,
                                    file_name=file_name_suggestion,
                                    mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                                    use_container_width=True,
                                    disabled=not st.session_state.full_reply_draft.strip()
                                )
                            except Exception as e:
                                st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå .docx ‡πÑ‡∏î‡πâ: {e}")

                        with export_col2:

                            text_to_copy = st.session_state.full_reply_draft

                            if text_to_copy and text_to_copy.strip():
                                
                                js_string = text_to_copy.replace('\\', '\\\\').replace('`', '\\`').replace('\n', '\\n').replace('"', '\\"')

                                import streamlit.components.v1 as components
                                components.html(
                                    f"""
                                    <script>
                                    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° HTML
                                    function copyToClipboard() {{
                                        const text = `{js_string}`;
                                        // ‡πÉ‡∏ä‡πâ API ‡∏Ç‡∏≠‡∏á Clipboard
                                        navigator.clipboard.writeText(text).then(() => {{
                                            // ‡∏™‡πà‡∏á custom event ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤ Streamlit ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á Toast
                                            window.parent.parent.postMessage({{
                                                'type': 'streamlit:setFrameHeight',
                                                'data': {{'message': '‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!', 'icon': 'üìã', 'type': 'toast'}}
                                            }}, '*');
                                        }}, (err) => {{
                                            alert("‡∏Å‡∏≤‡∏£‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: " + err);
                                        }});
                                    }}
                                    </script>

                                    <!-- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏° HTML ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô JS ‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πâ‡∏ô -->
                                    <button onclick="copyToClipboard()" 
                                            style="
                                                width: 100%; 
                                                padding: 0.60rem 0.75rem; /* ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Streamlit */
                                                border-radius: 0.5rem; 
                                                border: 1px solid rgba(49, 51, 63, 0.2);
                                                background-color: #FFFFFF; 
                                                color: #31333F; 
                                                font-weight: 400; 
                                                cursor: pointer; 
                                                transition: all 0.2s;
                                                font-family: 'Source Sans Pro', sans-serif; /* ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô Streamlit */
                                                font-size: 1rem;
                                                text-align: center;
                                                line-height: 1.6;
                                            ">
                                        üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                                    </button>
                                    <style>
                                        /* ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effect ‡πÉ‡∏´‡πâ‡∏õ‡∏∏‡πà‡∏° */
                                        button:hover {{
                                            border-color: #FF4B4B;
                                            color: #FF4B4B;
                                        }}
                                        button:active {{
                                            background-color: #F0F2F6;
                                        }}
                                    </style>
                                    """,
                                    height=55
                                )
                            else:
                                st.button("üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", use_container_width=True, disabled=True)

    else: # No file uploaded
        if st.session_state.uploaded_file_name is not None:
            st.session_state.ocr_text_content = None
            st.session_state.extracted_data = None
            st.session_state.reply_content = ""
            st.session_state.current_doc_type_for_data = None
            st.session_state.uploaded_file_name = None
            st.session_state.opening_options = [] 
            st.session_state.selected_opening = ""
        st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå PDF ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")